#include <algorithm>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <cstdlib>
#include <string>
#include <set>
#include <stack>
#include <map>
#include <iostream>
#include <vector>
#include <queue>
#include <sstream>
using namespace std;

typedef long long LL;

struct pole
{
  bool b,y,r,g,ok;
};

int dx[] = { 0,0,-1,1 };
int dy[] = { -1,1,0,0 };

int main()
{
   pole M[102][102],MP[102][102];
   for(int i=0;i<102;i++)
   for(int j=0;j<102;j++)
   {
     M[i][j].b = false;
     M[i][j].y = false;
     M[i][j].r = false;
     M[i][j].g = false;
     M[i][j].ok = false; 
     MP[i][j].b = false;
     MP[i][j].y = false;
     MP[i][j].r = false;
     MP[i][j].g = false;
     MP[i][j].ok = false; 


   }


   int n,m;
   cin >> n >> m;
   while( n != 0 && m != 0)
   {
   for(int i=0;i<n;i++)
   for(int j=0;j<m;j++)
   {
     M[i][j].b = false;
     M[i][j].y = false;
     M[i][j].r = false;
     M[i][j].g = false;
     M[i][j].ok = false; 
     MP[i][j].b = false;
     MP[i][j].y = false;
     MP[i][j].r = false;
     MP[i][j].g = false;
     MP[i][j].ok = false; 


   }



     vector <string> N(n);
     for(int i = 0;i < n;i++) 
       cin >> N[i];


    for(int i = 0;i<n;i++)
    for(int j = 0;j<m;j++)
    {
       if(N[i][j] == '*') M[i][j].ok = true;
       if(N[i][j] == 'b') M[i][j].b = true;
       if(N[i][j] == 'y') M[i][j].y = true;
       if(N[i][j] == 'r') M[i][j].r = true;
       if(N[i][j] == 'g') M[i][j].g = true;
       if(N[i][j] == '*') MP[i][j].ok = true;
       if(N[i][j] == 'b') MP[i][j].b = true;
       if(N[i][j] == 'y') MP[i][j].y = true;
       if(N[i][j] == 'r') MP[i][j].r = true;
       if(N[i][j] == 'g') MP[i][j].g = true;
    }

    int ile = 0;

    while(ile++ <= max(n,m)*6)
    {

      for(int i=0;i<n;i++)
      {
        for(int j=0;j<m;j++)
        {
          if(M[i][j].ok)
          {
            for(int z=0;z<4;z++)
            {
              
              if( i+dx[z] >= 0 && i+dx[z] < n && j+dy[z] >= 0 && j + dy[z] < m)
              {
                if( N[i+dx[z]][j+dy[z]] != '#' 
                  && !( N[i+dx[z]][j+dy[z]] == 'B' && !M[i][j].b  )     
                  && !( N[i+dx[z]][j+dy[z]] == 'Y' && !M[i][j].y  ) 
                  && !( N[i+dx[z]][j+dy[z]] == 'R' && !M[i][j].r  ) 
                  && !( N[i+dx[z]][j+dy[z]] == 'G' && !M[i][j].g  )                 
                  )
                {
                  MP[i+dx[z]][j+dy[z]].ok = true;
                  MP[i+dx[z]][j+dy[z]].b = M[i][j].b || MP[i+dx[z]][j+dy[z]].b;
                  MP[i+dx[z]][j+dy[z]].y = M[i][j].y || MP[i+dx[z]][j+dy[z]].y;
                  MP[i+dx[z]][j+dy[z]].r = M[i][j].r || MP[i+dx[z]][j+dy[z]].r;
                  MP[i+dx[z]][j+dy[z]].g = M[i][j].g || MP[i+dx[z]][j+dy[z]].g;
                }          
              } 
            }
          }
        }
      }

    bool spr = false;
    for(int i = 0;i<n;i++)
    {
    for(int j = 0;j<m;j++)
    {
      M[i][j].ok = MP[i][j].ok;
      M[i][j].b = MP[i][j].b;
      M[i][j].y = MP[i][j].y;
      M[i][j].r = MP[i][j].r;
      M[i][j].g = MP[i][j].g;
      if(M[i][j].ok && N[i][j] == 'X') spr = true;
   //   cout << M[i][j].ok << M[i][j].b << M[i][j].y << M[i][j].r << M[i][j].g << N[i][j];
    }
  //    cout << endl;
    }
  //  cout << endl << endl;
      if(spr == true) 
      {
        cout << "Escape possible in " << ile << " steps." << endl;
        break;
      }
      
    }

    if(ile > max(n,m)*6 )
    {
      cout << "The poor student is trapped!" << endl;
    }

     cin >> n >> m;
   } 




  return 0;
}
