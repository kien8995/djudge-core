#include<iostream>
#include<vector>
#include<string>
#include<queue>

using namespace std;

struct pos{
  int x,y,level,turns;
};

int main(){
  int R,C;
  while(1){
  cin>>R>>C;
  if (R==0 && C==0) return 0;
  vector<int> tmp(C+2,-1);
  vector<vector<int> > ttmp(R+2,tmp);
  vector<vector<vector<int> > > Map (16,ttmp);
  char c;
  int startx=-1,starty=-1;
  for (int x=0;x<R;x++){
    for (int y=0;y<C;y++){
      int i=x+1;
      int j=y+1;
      cin>>c;
      //      cout<<"read: "<<c<<endl;
      if (c=='*'){
	startx=j;
	starty=i;
	c='.';
      }
      if(c=='.'){
	for (int level=0;level<16;level++){
	  Map[level][i][j]=0;
	}
      }
      else if(c=='B'){
	int base=1;
	for (int level=0;level<16;level++){
	  if (level&base){ // if have the key
	    Map[level][i][j]=0;
	  }
	}
      }
      else if(c=='Y'){
	int base=2;
	for (int level=0;level<16;level++){
	  if (level&base){ // if have the key
	    Map[level][i][j]=0;
	  }
	}
      }
      else if(c=='R'){
	int base=4;
	for (int level=0;level<16;level++){
	  if (level&base){ // if have the key
	    Map[level][i][j]=0;
	  }
	}
      }
      else if(c=='G'){
	int base=8;
	for (int level=0;level<16;level++){
	  if (level&base){ // if have the key
	    Map[level][i][j]=0;
	  }
	}
      }
      else if(c=='b'){
	int base=1;
	for (int level=0;level<16;level++){
	  if (level&base){ // if have the key, do nothing
	    Map[level][i][j]=0;
	  }
	  else{
	    Map[level][i][j]=level|base; // goto map with key
	  }
	}
      }
      else if(c=='y'){
	int base=2;
	for (int level=0;level<16;level++){
	  if (level&base){ // if have the key, do nothing
	    Map[level][i][j]=0;
	  }
	  else{
	    Map[level][i][j]=level|base; // goto map with key
	  }
	}
      }
      else if(c=='r'){
	int base=4;
	for (int level=0;level<16;level++){
	  if (level&base){ // if have the key, do nothing
	    Map[level][i][j]=0;
	  }
	  else{
	    Map[level][i][j]=level|base; // goto map with key
	  }
	}
      }
      else if(c=='g'){
	int base=8;
	for (int level=0;level<16;level++){
	  if (level&base){ // if have the key, do nothing
	    Map[level][i][j]=0;
	  }
	  else{
	    Map[level][i][j]=level|base; // goto map with key
	  }
	}
      }
      else if(c=='X'){
	for (int level=0;level<16;level++){
	  Map[level][i][j]=30;
	}
      }
    }
    //      cin>>c;
  }
  /*
struct pos{
  int x,y,level,turns;
};
  */
  pos curpos,newpos;
  queue<pos> Q;
  curpos.x=startx;
  curpos.y=starty;
  curpos.level=0;
  curpos.turns=0;
  Q.push(curpos);
  bool finish=false;
  while(!Q.empty()){
    curpos = Q.front();
    //    cout<<curpos.level<<' '<<curpos.x<<' '<<curpos.y<<' '<<curpos.turns<<endl;
    Q.pop();
    if (Map[curpos.level][curpos.y][curpos.x]==30){
      cout<<"Escape possible in "<<curpos.turns<<" steps."<<endl;
      finish=true;
      break;
    }
    if (Map[curpos.level][curpos.y][curpos.x]>0){
      int d=Map[curpos.level][curpos.y][curpos.x];
      Map[curpos.level][curpos.y][curpos.x]=-1;
      curpos.level=d;
    }
    if (Map[curpos.level][curpos.y][curpos.x]==0){
      newpos=curpos;
      newpos.turns++;
      newpos.x++;
      Q.push(newpos);
      newpos.x-=2;
      Q.push(newpos);
      newpos.x++;
      newpos.y--;
      Q.push(newpos);
      newpos.y+=2;
      Q.push(newpos);
    }
    Map[curpos.level][curpos.y][curpos.x]=-1;
  }
  if (finish==false){
    cout<<"The poor student is trapped!"<<endl;
  }
  }
}

