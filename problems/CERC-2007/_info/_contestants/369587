#include <stdio.h>
#include <queue>
#include <stack>
#include <algorithm>
using namespace std;

vector<int> graph[1000];
vector<char> grc[1000];
int xy[1000][2];
int vis[1000];
vector<char> ret;
vector<int> hell;
int n;

int rr;

void go(int v){
	int i;
	if (rr == n && v == 0)throw 1;
	if (vis[v])return;
	vis[v]=1;
	rr++;
	for (i=0; i<graph[v].size(); i++){
		ret.push_back(grc[v][i]);
		hell.push_back(v);
		go(graph[v][i]);
		hell.pop_back();
		ret.pop_back();
	}
	vis[v]=0;
	rr--;
}


int main () {
	for(;;){
		scanf("%d", &n);
		if (!n)break;
		ret.clear();
		for(int i=0; i<n; i++){
			scanf("%d%d", &xy[i][0], &xy[i][1]);
			graph[i].clear();
			grc[i].clear();
			hell.clear();
		}
		int b=-1;
		for(int i=0; i<n; i++){
			b=-1;
			for(int j=0; j<n; j++)if (i!=j)if(xy[i][0]==xy[j][0] && xy[i][1] > xy[j][1] && (b==-1 || xy[j][1] > xy[b][1]))b=j;
			if (b==-1)continue;
			graph[i].push_back(b);
			grc[i].push_back('S');
//			printf("%d z %d, %c\n", i, b, 'S');
		}		
		for(int i=0; i<n; i++){
			b=-1;
			for(int j=0; j<n; j++)if (i!=j)if(xy[i][0]==xy[j][0] && xy[i][1] < xy[j][1] && (b==-1 || xy[j][1] < xy[b][1]))b=j;
			if (b==-1)continue;
			graph[i].push_back(b);
			grc[i].push_back('N');
//			printf("%d z %d, %c\n", i, b, 'N');
		}		
		for(int i=0; i<n; i++){
			b=-1;
			for(int j=0; j<n; j++)if (i!=j)if(xy[i][1]==xy[j][1] && xy[i][0] > xy[j][0] && (b==-1 || xy[j][0] > xy[b][0]))b=j;
			if (b==-1)continue;
			graph[i].push_back(b);
			grc[i].push_back('W');
//			printf("%d z %d, %c\n", i, b, 'W');
		}		
		for(int i=0; i<n; i++){
			b=-1;
			for(int j=0; j<n; j++)if (i!=j)if(xy[i][1]==xy[j][1] && xy[i][0] < xy[j][0] && (b==-1 || xy[j][0] < xy[b][0]))b=j;
			if (b==-1)continue;
			graph[i].push_back(b);
			grc[i].push_back('E');
//			printf("%d z %d, %c\n", i, b, 'E');
		}
//		printf("\n\n\n");
		memset(vis, 0, sizeof(vis));
		
		rr=0;
		ret.clear();
		try{
		go(0);
		}catch(...){
		}
		
		long long pole = 0;
		for(int i=1; i<n-1; i++)
		pole += 1LL*(xy[hell[i]][0]-xy[hell[0]][0])*(xy[hell[i+1]][1]-xy[hell[0]][1]) - 1LL*(xy[hell[i]][1]-xy[hell[0]][1])*(xy[hell[i+1]][0]-xy[hell[0]][0]);
		if (pole > 0){
			for(int i=0; i<ret.size(); i++)
				if (ret[i]=='E')
				ret[i]='W';
				else if (ret[i]=='W')
				ret[i]='E';
				else if (ret[i]=='N')
				ret[i]='S';
				else if (ret[i]=='S')
				ret[i]='N';
				reverse(ret.begin(), ret.end());
		}

		for(int i=0; i<ret.size(); i++)
			printf("%c", ret[i]);
		printf("\n");
	}
	return 0;
}
