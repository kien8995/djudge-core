#include <stdio.h>
#include <stdlib.h>

#define MAX_N 1050

int n;
int P[MAX_N][2];
int U[MAX_N];
int N[MAX_N];

int findV(int a)
{
	int pod=0;
	int nad=0;
	int spod=-1;
	int snad=10001;
	int vpod=0;
	int vnad=0;
	for(int i = 0;i<n;i++)
	if(i!=a)
	{
		if(P[i][0]==P[a][0])
			if(P[i][1]<P[a][1])
			{
				if(P[i][1]>spod)
				{
					spod=P[i][1];
					vpod=i;
				}
				pod++;
			}
			else
			{
				if(P[i][1]<snad)
				{
					snad=P[i][1];
					vnad=i;
				}
				nad++;
			}
	}
	if(pod & 1 == 1)
		{
			U[vpod]=1;
			N[a]=vpod;
			return vpod;
		}
	else
		{
			U[vnad]=1;
			N[a]=vnad;
			return vnad;
		}
}
int findH(int a)
{
	int l=0;
	int r=0;
	int sl=-1;
	int sr=10001;
	int vl=0;
	int vr=0;
	for(int i = 0;i<n;i++)
	if(i!=a)
	{
		if(P[i][1]==P[a][1])
			if(P[i][0]<P[a][0])
			{
				if(P[i][0]>sl)
				{
					sl=P[i][0];
					vl=i;
				}
				l++;
			}
			else
			{
				if(P[i][0]<sr)
				{
					sr=P[i][0];
					vr=i;
				}
				r++;
			}
	}
	if(l & 1 == 1)
		{
			U[vl]=1;
			N[a]=vl;
			return vl;
		}
	else
		{
			U[vr]=1;
			N[a]=vr;
			return vr;
		}
}
void solve()
{
	for(int i =0 ; i < n; i++)
	{
		U[i]=0;
		N[i]=-1;
	}
	int minX=20001;
	int pos=-1;
	for(int i=0;i<n;i++)
		if(P[i][0]<minX)
			{
				minX=P[i][0];
			}
	int minY=20001;
	for(int i=0;i<n;i++)
		if(P[i][0]==minX)
			if(P[i][1]<minY)
				{
					minY=P[i][1];
					pos=i;
				}
	int V=1;
	
	for(int i=0;i<n;i++)
		{
//printf("pos: %d\n",pos);
			if(pos==0)
				break;
			if(V==0)
			{
				int next = findH(pos);
				pos=next;
				V=1;
			}
			else
			{
				int next=findV(pos);
				pos=next;
				V=0;
			}
		}
	for(int i=0;i<n;i++)
	{
	//printf("main pos: %d\n",pos);
		if(V==0)
		{
			int next = findH(pos);
			if(P[next][0] > P[pos][0])
				printf("E");
			else
				printf("W");
			pos=next;
			V=1;
		}
		else
		{
			int next=findV(pos);
			if(P[next][1] < P[pos][1])
				printf("S");
			else
				printf("N");
			pos=next;
			V=0;
		}
	}
	printf("\n");
}
int main()
{	
	while(1)
	{
		scanf("%d",&n);
		if(n==0) return 0;
		for(int i1=0;i1<n;i1++)
		{
			scanf("%d %d",P[i1],P[i1]+1);
		}
		solve();
	}
	return 0;
}

/*
#include <stdio.h>
#include <stdlib.h>

#define MAX_N 1050

int n;
int P[MAX_N][2];


int comp(const void *a, const void *b)
{
	int *aa= (int *)a;
	int *bb= (int *)b;
	if(*aa==*bb)
		return *(aa+1) - *(bb+1);
	return (*aa-*bb);
}

void solve()
{
	qsort(P,n,sizeof(P[0][0])<<1,comp);
	int p=0;
	int k=0;
	while(p<n)
	{
		while(k+1<n && P[k+1][0] == P[p][0])
			++k;
				

		p=k+1;
		k=p;
	}
}
int main()
{	
	while(1)
	{
		scanf("%d",&n);
		if(n==0) return 0;
		for(int i1=0;i1<n;i1++)
		{
			scanf("%d %d",P[i1],P[i1]+1);
		}
		solve();
	}
	return 0;
}
*/