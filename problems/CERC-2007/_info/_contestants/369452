#include<cstdio>
#include<cmath>

using namespace std;
int main()
{
	int points[3000][2];
	int x1,y1,x2,y2,dx,dy;
	while(1)
	{
		int n,r,msum;
		long double R,R2;
		bool oO;
		scanf("%d %d",&n,&r);
		if (n==0 && r==0) return 0;
		R=r+0.0001;
		R2=R*R;
		msum = 1;
		for (int i=0;i<n;++i)
			scanf("%d %d",&(points[i][0]),&(points[i][1]));
		for (int i=0;i<n;++i)
			for (int j=i+1;j<n;++j)
		{
			long double A,B,C,a,b,ap,x0,y0;
			long double OX1,OY1,OX2,OY2;
			x1=points[i][0];
			y1=points[i][1];
		  x2=points[j][0];
			y2=points[j][1];
			
			dx=x1-x2;
			dy=y1-y2;
			
			if (dy==0)
			{
				A=1;
				B=-2*y1;
				C=y1*y1+(x1-(x1+x2)/2)*(x1-(x1+x2)/2)-R2;
			}
			else
			{
				if (dx==0)
				{
					a=0;
					b=(y1+y2)/2;
				}
				else
				{
					ap=dy/dx;
					x0=(x1+x2)/2;
					y0=(y1+y2)/2;
					a=-1/ap;
					b=y0+x0/ap;
				}
				A=1+a*a;
				B=2*a*b-2*y1*a-2*x1;
				C=x1*x1+y1*y1+b*b-R2-2*y1*b;
			}
			long double delta=B*B-4*A*C;
			if (delta<0)
			{
				continue;
			}
			delta=sqrt(delta);
			long double t1=(-B-delta)/(2*A);
			long double t2=(-B+delta)/(2*A);
			if (dy==0)
			{
				OX1=(x1+x2)/2;
				OX2=OX1;
				OY1=t1;
				OY2=t2;
			}
			else
			{
				OX1=t1;
				OY1=a*t1+b;
				OX2=t2;
				OY2=a*t2+b;
			}
			int sum1=0,sum2=0;
			for (int w=0;w<n;++w)
			{
				long double rx1=OX1-points[w][0];
				long double ry1=OY1-points[w][1];
				long double rx2=OX2-points[w][0];
				long double ry2=OY2-points[w][1];
				if (rx1*rx1+ry1*ry1<=R2) ++sum1;
				if (rx2*rx2+ry2*ry2<=R2) ++sum2;
			}
			if (sum1>msum) msum=sum1;
			if (sum2>msum) msum=sum2;
		}		
		printf("It is possible to cover %d points.\n",msum);
	}
}