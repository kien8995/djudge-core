#include <cstdio>
#include <vector>
#include <string>
#include <queue>

using namespace std;

typedef vector<string> graph;

class allapot
{
  public:
    int a;
    int getxx() { return a & 127; }
    int getyy() { return (a >> 7) & 127; }
    void setxx(int b) { a=(a & ~127) | b; }
    void setyy(int b) { a=(a & ~(127 << 7) | (b << 7)); }
    bool getr() { return ((a >> 14) & 1); }
    bool getg() { return ((a >> 15) & 1); }
    bool getb() { return ((a >> 16) & 1); }
    bool gety() { return ((a >> 17) & 1); }
    void setr() { a=(a | (1 <<14)); }
    void setg() { a=(a | (1 <<15)); }
    void setb() { a=(a | (1 <<16)); }
    void sety() { a=(a | (1 <<17)); }
};

bool szabad(graph& g, allapot a, int x, int y)
{
    if (g[x][y]=='#') return false;
    if (g[x][y]=='.' || g[x][y]=='X' || g[x][y]=='r' || g[x][y]=='g' || g[x][y]=='b' || g[x][y]=='y') return true;
    if (g[x][y]=='B' && a.getb()) 
    {
      return true;
    }
    if (g[x][y]=='R' && a.getr())
    {
      return true;
    }
    if (g[x][y]=='G' && a.getg())
    {
      return true;
    }
    if (g[x][y]=='Y' && a.gety())
    {
      return true;
    }
    return false;
}

vector<allapot> szom(graph& g, allapot a)
{
  vector<allapot> r;
  allapot b;
  if (a.getxx()>0 && szabad(g, a, a.getxx()-1, a.getyy()))
  {
    b=a;
    b.setxx(a.getxx()-1);
    r.push_back(b);
  }
  if (a.getxx()<g.size()-1 && szabad(g, a, a.getxx()+1, a.getyy()))
  {
    b=a;
    b.setxx(a.getxx()+1);
    r.push_back(b);
  }
  if (a.getyy()>0 && szabad(g, a, a.getxx(), a.getyy()-1))
  {
    b=a;
    b.setyy(a.getyy()-1);
    r.push_back(b);
  }
  if (a.getyy()<g[0].size()-1 && szabad(g, a, a.getxx(), a.getyy()+1))
  {
    b=a;
    b.setyy(a.getyy()+1);
    r.push_back(b);
  }
  return r;
}

int szeles(graph& g)
{
  int x=-1, y=-1;
  for (int i=0; x==-1 && i<g.size(); ++i)
  {
    for (int j=0; x==-1 && j<g[i].size(); ++j)
    {
      if (g[i][j]=='*') { x=i; y=j; g[i][j]='.'; }
    }
  }
  allapot a, b;
  a.a=0;
  a.setxx(x);
  a.setyy(y);
  vector<bool> v(270000, false);
  vector<int> d(270000, -1);
  deque<allapot> q;
  q.push_back(a);
  d[a.a]=0;
  v[a.a]=true;
  while (!q.empty())
  {
    /*while(*/b=q.front(), q.pop_front()/*, v[b.a])*/;
    vector<allapot> s=szom(g, b);
    for (int i=0; i<s.size(); ++i)
    {
      if (!v[s[i].a])
      {
        allapot c=s[i];
        if (g[s[i].getxx()][s[i].getyy()]=='X') return d[b.a]+1;
        if (g[s[i].getxx()][s[i].getyy()]=='r') c.setr();
        if (g[s[i].getxx()][s[i].getyy()]=='g') c.setg();
        if (g[s[i].getxx()][s[i].getyy()]=='b') c.setb();
        if (g[s[i].getxx()][s[i].getyy()]=='y') c.sety();
        q.push_back(c);
        d[c.a]=d[b.a]+1;
        v[c.a]=true;
      }
    }
  }
  return -1;
}

int main()
{
  int n, m;
  while(scanf("%d %d", &n, &m), n+m)
  {
    graph g(n);
    char s[m+1];     
    for(int i=0;i<n;++i)
    {
      scanf("%s", s);
      g[i]=string(s);
    }
    int d=szeles(g);
    if (d==-1)
    {
      printf("The poor student is trapped!\n");
    }
    else
    {
      printf("Escape possible in %d steps.\n", d);
    }
  }
  
  return 0;
}
