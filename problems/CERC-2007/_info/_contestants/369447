#include <iostream>
#include <cstdio>
#include <set>
#include <map>
#include <vector>
#include <utility>
#include <algorithm>
#include <complex>
#include <queue>
#include <string>
#include <cstdlib>
#include <cstring>
using namespace std;

typedef pair<int, int> PI;
#define REP(i,n) for (int i=0; i<int(n); i++)
#define FOR(i,a,n) for (int i=a; i<int(n); i++)
#define FORD(i,n) for (int i=int(n)-1; i>=0; i--)
#define FOREACH(it,a) for (__typeof(a.begin()) it=a.begin(); it!=a.end(); it++)
int vs(PI a, PI b) {
    return a.first*b.second-a.second*b.first;
}
int main() {
    int n;
    PI a[10000];
    while (scanf("%d", &n)==1) {
        if (!n) break;
        map<int, vector<int> > x, y;
        PI zac;
        REP(i,n) {
            scanf("%d %d", &a[i].first, &a[i].second);
            if (i == 0) zac = a[0];
            x[a[i].first].push_back(a[i].second);
            y[a[i].second].push_back(a[i].first);
        }

        map<PI, vector<PI> > dalsi;
        FOREACH(it,x) {
            sort(it->second.begin(), it->second.end());
            vector<int> &o = it->second;
            for (unsigned i=0; i<o.size(); i+=2) {
                dalsi[PI(it->first, o[i])].push_back(PI(it->first, o[i+1]));
                dalsi[PI(it->first, o[i+1])].push_back(PI(it->first, o[i]));
            }
        }
        FOREACH(it,y) {
            sort(it->second.begin(), it->second.end());
            vector<int> &o = it->second;
            for (unsigned i=0; i<o.size(); i+=2) {
                dalsi[PI(o[i], it->first)].push_back(PI(o[i+1], it->first));
                dalsi[PI(o[i+1], it->first)].push_back(PI(o[i], it->first));
            }
        }

        vector<PI> obvod;
        while (true) {
            obvod.push_back(zac);
            vector<PI> &d = dalsi[zac];
            //cout<<d[0].first<<" "<<d[0].second<<" "<<d[1].first<<" "<<d[1].second<<endl;
            bool co = false;
            if (obvod.size()>1 && d[co] == obvod[obvod.size()-2]) co = true;
            zac = d[co];
            if (zac == a[0]) break;
        }

        
        bool clock = false;
        long long obs = 0;
        REP(i,n)
            obs += vs(obvod[i], obvod[(i+1)%n]);
        if (obs < 0) clock = true;
        
        if (!clock) reverse(obvod.begin()+1, obvod.end());
        string res;
        REP(i,n) {
            int d = (i+1)%n;
            if (obvod[i].first == obvod[d].first) {
                if (obvod[d].second > obvod[i].second) res+='N';
                else res+='S';
            }
            else  {
                if (obvod[d].first > obvod[i].first) res+='E';
                else res+='W';
            }
        }
        printf("%s\n", res.c_str());
    }
} 
