#include <cstdio>
#include <queue>
using namespace std;

char t[128][128];
int rows, cols;

int sr, sc;

bool vis[128][128][16];
bool level[128][128][16];

void find_start()
{
	for (int i=0; i<rows; i++)
	for (int j=0; j<cols; j++)
	if (t[i][j]=='*')
	{
		sr = i;
		sc = j;
		return;
	}
}

int find()
{
		find_start();
//printf("%d %d\n", sr, sc);
		queue<int> qr;
		queue<int> qc;
		queue<int> qk;
		queue<int> ql;

		for (int i=0; i<rows; i++)
		for (int j=0; j<cols; j++)
		for (int k=0; k<16; k++)
			vis[i][j][k] = false;

		qr.push(sr);
		qc.push(sc);
		qk.push(0);
		ql.push(0);
		vis[sr][sc][0] = true;

		while (!qk.empty())
		{
			int pr = qr.front(); qr.pop();
			int pc = qc.front(); qc.pop();
			int pk = qk.front(); qk.pop();
			int pl = ql.front(); ql.pop();

//			printf("%d %d %d\n", pr, pc, pk);

			const int dr[4] = {-1, 1, 0, 0};
			const int dc[4] = {0, 0, -1, 1};

			for (int q=0; q<4; q++)
			{
				int r = pr + dr[q];
				int c = pc + dc[q];
				int k = pk;
				if (r<0 || r>=rows) continue;
				if (c<0 || c>=cols) continue;
				if (t[r][c]=='#') continue;

//				printf(">%d %d %d %c\n", r, c, k, t[r][c]);

				if (t[r][c]=='X')
					return pl+1;

				if (t[r][c]=='b') k |= 1;
				if (t[r][c]=='y') k |= 2;
				if (t[r][c]=='r') k |= 4;
				if (t[r][c]=='g') k |= 8;		
				
				if (t[r][c]=='B' && (k&1)==0) continue;
				if (t[r][c]=='Y' && (k&2)==0) continue;
				if (t[r][c]=='R' && (k&4)==0) continue;
				if (t[r][c]=='G' && (k&8)==0) continue;

				if (vis[r][c][k]) continue;				
				vis[r][c][k] = true;
				qr.push(r);
				qc.push(c);
				qk.push(k);
				ql.push(pl+1);
			}
		}
	return -1;
}

int main()
{
	while (scanf("%d%d", &rows, &cols), rows+cols>0)
	{	
		for (int i=0; i<rows; i++)
			scanf("%s", t[i]);		

		int i = find();
		if (i<0) puts("The poor student is trapped!");
		else printf("Escape possible in %d steps.\n", i);
	}

	return 0;
}
