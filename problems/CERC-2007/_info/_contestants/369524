#include <cstdio>
#include <map>
#include <utility>
#include <vector>
#include <algorithm>
using namespace std;

struct point
{
    int x, y;
    bool makrx, makry;
    point(): makrx(false), makry(false){}
    point(int _x, int _y): makrx(false), makry(false), x(_x), y(_y){}

    bool operator < (const point & b) const
    {
        if(y == b.y)
            return x < b.x;
        return y < b.y;
    }

    bool operator == (const point &b) const
    {
        if(x == b.x && y == b.y)
            return true;
        return false;
    }
};

struct edge
{
    point a, b;
    edge(point _a, point _b)
    {
        a = _a;
        b = _b;
    }

    bool operator < (const edge &B) const
    {
        if(a == B.a)
            return b < B.b;
        return a < B.a;
    }
};

long long int det(point a, point b, point c)
{
    return a.x*(b.y-c.y)-a.y*(b.x-c.x)+b.x*c.y-b.y*c.x;
}

int fun()
{
    int n;
    scanf("%d", &n);
    if(n == 0)
        return 1;

    point *points = new point[n];
    point *points2 = new point[n];

    for(int i=0;i<n;++i)
    {
        scanf("%d %d", &points[i].x, &points[i].y);
        points2[i].y = points[i].x;
        points2[i].x = points[i].y;
    }

    point startowy = points[0];

    sort(points, points+n);
    sort(points2, points2+n);

    map<point, bool> ma_x, ma_y;
    map<point, point> nastepny_pion;
    vector<edge> edges;

    for(int i=1;i<n;++i)
    {
        nastepny_pion[point(points2[i-1].y, points2[i-1].x)] =point(points2[i].y, points2[i].x);    
    }

    for(int i=0;i<n;++i)
    {
        if(!ma_x[points[i]])
        {
            edges.push_back(edge(points[i], points[i+1]));
            ma_x[points[i]] = true;
            ma_x[points[i+1]] = true;
        }
        if(!ma_y[points[i]])
        {
            edges.push_back(edge(points[i], nastepny_pion[points[i]]));
            ma_y[points[i]] = true;
            ma_y[nastepny_pion[points[i]]] = true;
        }
    }

    map<point, vector<point> > kre;
    map<edge, bool> krawedz_uzyta;

    point cur_pkt = startowy;

    vector<point> obwod;

    for(int i=0;i<edges.size();++i)
    {
        kre[edges[i].a].push_back( edges[i].b);
        kre[edges[i].b].push_back( edges[i].a);
    }

    while(1)
    {
        point pkt_next;
        if(!krawedz_uzyta[ edge( kre[cur_pkt][0], cur_pkt ) ] )
        {
            krawedz_uzyta[ edge( kre[cur_pkt][0], cur_pkt ) ] = true;
            krawedz_uzyta[ edge( cur_pkt, kre[cur_pkt][0] ) ] = true;
            obwod.push_back(cur_pkt);
            cur_pkt = kre[cur_pkt][0];
        }
        else
        {
            krawedz_uzyta[ edge( kre[cur_pkt][1], cur_pkt ) ] = true;
            krawedz_uzyta[ edge( cur_pkt, kre[cur_pkt][1] ) ] = true;
            obwod.push_back(cur_pkt);
            cur_pkt = kre[cur_pkt][1];
        }
        
        if(cur_pkt == startowy)
            break;
    }

    int s = obwod.size();
    vector<char> wynik;
    for(int i=0;i<obwod.size();++i)
    {
        if(obwod[i].x == obwod[ (i+1)%s ].x && obwod[i].y > obwod[ (i+1)%s].y)
            wynik.push_back('S');
        else if(obwod[i].x == obwod[ (i+1)%s ].x && obwod[i].y < obwod[ (i+1)%s].y)
            wynik.push_back('N');
        else if(obwod[i].y == obwod[ (i+1)%s ].y && obwod[i].x > obwod[ (i+1)%s].x)
            wynik.push_back('W');
        else if(obwod[i].y == obwod[ (i+1)%s ].y && obwod[i].x < obwod[ (i+1)%s].x)
            wynik.push_back('E');
    }

    int ilp = 0, ill = 0;
    
    for(int i=0;i<obwod.size();++i)
    {
        if(det(obwod[i], obwod[ (i+1) % s], obwod[ (i+2) % s]) > 0)
            ++ill;
        else
            ++ilp;
    }

    if(ill > ilp)
    {
        vector<char> wyniktmp(wynik);

        for(int i=0;i<wynik.size();++i)
        {
            if(wynik[i] == 'W')
                wyniktmp[i] = 'E';
            else if(wynik[i] == 'N')
                wyniktmp[i] = 'S';
            else if(wynik[i] == 'E')
                wyniktmp[i] = 'W';
            else if(wynik[i] == 'S')
                wyniktmp[i] = 'N';
            
        }

        for(int i=0;i<wynik.size();++i)
            wynik[i] = wyniktmp[wynik.size() -i -1];
        //wynik = wyniktmp;
    }

    for(int i=0;i<wynik.size();++i)
        printf("%c", wynik[i]);
    printf("\n");

    delete [] points;
    delete [] points2;

    return 0;
}

int main()
{
    int n;
    while(fun() != 1)
        ;
    return 0;
}
