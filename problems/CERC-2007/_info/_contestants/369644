#include <stdio.h>
#include <math.h>
#include <algorithm>
using namespace std;

int p[2][2005];
int N,R;
double RR;
struct _a {
  int who, e;
  double a;
  bool operator<(const struct _a& b) const { return a<b.a; }
} a[10050];

int main(void) {
  while (scanf("%d%d", &N, &R), N) {
    for (int i=0;i<N;i++) scanf("%d%d", p[0]+i, p[1]+i);

    int best=0;
    RR=((double)4*R)*R+1e-6;
    for (int i=0;i<N;i++) {
      //compute angles for all other points
      int len=0;
      for (int j=0;j<N;j++) if (j!=i) {
	double dx=(double)p[0][j]-p[0][i], dy=(double)p[1][j]-p[1][i];	
	double dist=dx*dx+dy*dy;
	if (dist > RR) continue;
	double angle=atan2(dx, dy);
	double delta=M_PI_2l-asin(sqrt(dist)/(double)(2*R));
	double addon=0;
	if (angle-delta < 0) addon=2*M_PIl;
	a[len].who=j; a[len].e=1; a[len].a=angle-delta+addon; len++;
	a[len].who=j; a[len].e=0; a[len].a=angle+delta+addon+1e-6; len++;
	a[len].who=j; a[len].e=1; a[len].a=2*M_PIl+angle-delta+addon; len++;
	a[len].who=j; a[len].e=0; a[len].a=2*M_PIl+angle+delta+addon+1e-6; len++;
      }
      sort(a, a+len);
      //      for (int i=0;i<len;i++) printf("%f %d, ", a[i].a, a[i].e); puts("");

      for (int i=0, num=0; i<len; i++) {
	num+=a[i].e ? 1 : -1;
	if (num>best) best=num;
      }
    }

    printf("It is possible to cover %d points.\n", best+1);
  }

  return 0;
}
