#include <string>
#include <vector>
#include <cstdio>
#include <algorithm>

using namespace std;

struct pont
{
  int x;
  int y;
  int index;
  pont(int x_, int y_, int i_): x(x_), y(y_), index(i_) {}
  pont(): x(0), y(0), index(-1) {}
//  bool sortx(const pont& b) const { return x<b.x; }
//  bool sorty(const pont& b) const { return y<b.y; }
};

class sortx
{
  public:
    int operator()(const pont& p1, const pont& p2) const
    {
      return p1.x<p2.x;
    }
};

class sorty
{
  public:
    int operator()(const pont& p1, const pont& p2) const
    {
      return p1.y>p2.y;
    }
};

int main()
{
  int n;
  int a, b;
  while (scanf("%d", &n), n)
  {
    vector<pont> pk(n);
    vector<int> xpar(n, -1);
    vector<int> ypar(n, -1);
    for (int i(0); i<n; ++i)
    {
      scanf("%d %d", &a, &b);
      pk[i]=pont(a, b, i);
    }
    vector<pont> v(pk);
    sort(v.begin(), v.end(), sorty());
    for (int i=0; i<n/2; ++i)
    {
      xpar[v[2*i].index]=v[2*i+1].index;
      xpar[v[2*i+1].index]=v[2*i].index;
    }
    sort(v.begin(), v.end(), sortx());
    for (int i=0; i<n/2; ++i)
    {
      ypar[v[2*i].index]=v[2*i+1].index;
      ypar[v[2*i+1].index]=v[2*i].index;
    }
    string r;
    int e;
    int ind=v[0].index;
    for (int i=0; i<n/2; ++i)
    {
      if (ind==0) e=2*i;
      if (pk[xpar[ind]].x>pk[ind].x) r+='E';
      else r+='W';
      ind=xpar[ind];
      if (ind==0) e=2*i+1;
      if (pk[ypar[ind]].y<pk[ind].y) r+='S';
      else r+='N';
      ind=ypar[ind];
    }
    printf("%s%s\n", r.substr(e, r.size()-e).c_str(), r.substr(0, e).c_str());
  }
  return 0;
}
