//* Problem  : A - Addition Chains
//* Contest  : acm.tju.edu.cn
//* Origin   : University of Ulm Local Contest 1997
//* Type     : Solution
//* Date     : 2008.06.07
//* Author   : alt
//* Language : C++
//* Compiler : Microsoft Visual C++ 8.0

#include <stdio.h>
#include <math.h>
#include <string.h>
#include <stdlib.h>

#include <algorithm>
#include <vector>
#include <queue>
#include <map>
#include <string>
#include <iostream>
using namespace std;
#define int64 long long
#define INF 1000000000
#define EPS 1E-8

#define ALL(a) a.begin(), a.end()
#define PB(a, v) a.push_back(v)
#define MP(a,b) make_pair(a, b)
#define FOR(i, n) for (int i = 0; i < (int)(n); i++)
#define FORO(i, obj) for (int i = 0; i < (int)(obj.size); i++)

int n, res, r[128][128];

int a[128], rr[128];

void recurse(int l)
{
	if (l >= res) return;
	if (a[l] > n) return;
	if (a[l] == n)
	{
		res = l;
		for (int i = 1; i <= l; i++)
			rr[i] = a[i];
		return;
	}
	for (int i1 = l; i1 >= 1; i1--)
		for (int i2 = l; i2 >=i1; i2--)
			if (a[i1] + a[i2] > a[l])
			{
				a[l + 1] = a[i1] + a[i2];
				recurse(l + 1);
			}

}

void solve(int k)
{
	a[1] = 1; res = INF; n = k;
	recurse(1);
	r[k][0] = res;
	printf("\"");
	for (int i = 1; i <= res; i++)
	{
		r[k][i] = rr[i];
		printf("%d%s", rr[i], i == res ? "\"," : " ");
	}

	printf("\n");
}

char *ss[] = {
"",
"1",
"1 2",
"1 2 3",
"1 2 4",
"1 2 4 5",
"1 2 4 6",
"1 2 4 6 7",
"1 2 4 8",
"1 2 4 8 9",
"1 2 4 8 10",
"1 2 4 8 10 11",
"1 2 4 8 12",
"1 2 4 8 12 13",
"1 2 4 8 12 14",
"1 2 4 5 10 15",
"1 2 4 8 16",
"1 2 4 8 16 17",
"1 2 4 8 16 18",
"1 2 4 8 16 18 19",
"1 2 4 8 16 20",
"1 2 4 8 16 20 21",
"1 2 4 8 16 20 22",
"1 2 4 5 9 18 23",
"1 2 4 8 16 24",
"1 2 4 8 16 24 25",
"1 2 4 8 16 24 26",
"1 2 4 8 9 18 27",
"1 2 4 8 16 24 28",
"1 2 4 8 16 24 28 29",
"1 2 4 8 10 20 30",
"1 2 4 8 10 20 30 31",
"1 2 4 8 16 32",
"1 2 4 8 16 32 33",
"1 2 4 8 16 32 34",
"1 2 4 8 16 32 34 35",
"1 2 4 8 16 32 36",
"1 2 4 8 16 32 36 37",
"1 2 4 8 16 32 36 38",
"1 2 4 8 12 13 26 39",
"1 2 4 8 16 32 40",
"1 2 4 8 16 32 40 41",
"1 2 4 8 16 32 40 42",
"1 2 4 8 9 17 34 43",
"1 2 4 8 16 32 40 44",
"1 2 4 8 9 18 36 45",
"1 2 4 8 10 18 36 46",
"1 2 4 8 12 13 26 39 47",
"1 2 4 8 16 32 48",
"1 2 4 8 16 32 48 49",
"1 2 4 8 16 32 48 50",
"1 2 4 8 16 17 34 51",
"1 2 4 8 16 32 48 52",
"1 2 4 8 16 32 48 52 53",
"1 2 4 8 16 18 36 54",
"1 2 4 8 16 18 36 54 55",
"1 2 4 8 16 32 48 56",
"1 2 4 8 16 32 48 56 57",
"1 2 4 8 16 32 48 56 58",
"1 2 4 8 16 17 34 51 59",
"1 2 4 8 16 20 40 60",
"1 2 4 8 16 20 40 60 61",
"1 2 4 8 16 20 40 60 62",
"1 2 4 8 16 20 21 42 63",
"1 2 4 8 16 32 64",
"1 2 4 8 16 32 64 65",
"1 2 4 8 16 32 64 66",
"1 2 4 8 16 32 64 66 67",
"1 2 4 8 16 32 64 68",
"1 2 4 8 16 32 64 68 69",
"1 2 4 8 16 32 64 68 70",
"1 2 4 8 16 32 64 68 70 71",
"1 2 4 8 16 32 64 72",
"1 2 4 8 16 32 64 72 73",
"1 2 4 8 16 32 64 72 74",
"1 2 4 8 16 24 25 50 75",
"1 2 4 8 16 32 64 72 76",
"1 2 4 8 9 17 34 68 77",
"1 2 4 8 16 24 26 52 78",
"1 2 4 8 16 24 26 52 78 79",
"1 2 4 8 16 32 64 80",
"1 2 4 8 16 32 64 80 81",
"1 2 4 8 16 32 64 80 82",
"1 2 4 8 16 17 33 66 83",
"1 2 4 8 16 32 64 80 84",
"1 2 4 8 16 17 34 68 85",
"1 2 4 8 16 18 34 68 86",
"1 2 4 8 16 24 28 29 58 87",
"1 2 4 8 16 32 64 80 88",
"1 2 4 8 16 32 64 80 88 89",
"1 2 4 8 16 18 36 72 90",
"1 2 4 8 16 24 25 50 75 91",
"1 2 4 8 16 20 36 72 92",
"1 2 4 8 16 20 36 72 92 93",
"1 2 4 8 16 24 26 52 78 94",
"1 2 4 8 16 20 21 37 74 95",
"1 2 4 8 16 32 64 96",
"1 2 4 8 16 32 64 96 97",
"1 2 4 8 16 32 64 96 98",
"1 2 4 8 16 32 33 66 99",
"1 2 4 8 16 32 64 96 100",
};

int main()
{
#ifdef _DEBUG
	freopen("1166.in", "r", stdin);
//	freopen("1166.out", "w", stdout);
#endif
//	for (int i = 1; i <= 100; i++)
//		solve(i);
	while (scanf("%d", &n) == 1 && n)
	{
//		for (int i = 1; i <= r[n][0]; i++)
//			printf("%d%c", r[n][i], i == r[n][0] ? '\n' : ' ');
		printf("%s\n", ss[n]);
	}
	return 0;
}
